<?php


/**
* Metodos necesarios para la migracion de Datos
*/
class MigrationController extends Controller {

    public function actionIndex()
    {
        # code...
        $this->render("index");
    }


    public function actionProcess($action=null, $run=null){

        if($run == true){
            switch ($action) {
                case 'encrypt':
                    $this->EncryptData();
                    break;
                case 'antecedentesjson':
                    $this->_GeneraJsonAntecedentes();
                    break;
                default:
                    Yii::app()->user->setFlash("danger", "Error: No se Eligio ninguna Accion");
                    $this->redirect($this->createUrl("index"));
                    break;
            }
        }
        Yii::app()->user->setFlash("danger", "Error: No se Ejecuto ninguna Accion");
        $this->redirect($this->createUrl("index"));

    }

    /**
    * @todo
    * Encripta los Datos de las Tarjetas Credito/Debito
    * @author erasto@realhost.com.mx
    */
    protected function EncryptData(){


        $_GetData = Yii::app()->db->createCommand()
        ->select("folio, cuenta, vencimiento, cuenta_sat, num_plastico")
        ->from("rh_cobranza")
        ->where("paymentid IN(9,10)")
        ->queryAll();
        try {

            $Transaccion = Yii::app()->db->beginTransaction();

            $count = 0;
            foreach ($_GetData as $Data) {

                if(!empty($Data['folio']))
                {

                    $Encryptdata = "UPDATE rh_cobranza SET
                        cuenta = :cuenta,
                        vencimiento = :vencimiento,
                        cuenta_sat = :cuenta_sat,
                        num_plastico = :num_plastico
                    WHERE folio = :folio
                    ";

                    $EncyptParameters = array(
                        ":cuenta" => $this->OpenSSLEncrypt($Data['cuenta']),
                        ":vencimiento" => $this->OpenSSLEncrypt($Data['vencimiento']),
                        ":cuenta_sat" => $this->OpenSSLEncrypt($Data['cuenta_sat']),
                        ":num_plastico" => $this->OpenSSLEncrypt($Data['num_plastico']),
                        ":folio" => $Data['folio']
                    );
                    Yii::app()->db->createCommand($Encryptdata)->execute($EncyptParameters);
                }
                $count++;
            }

            $Transaccion->commit();
            Yii::app()->user->setFlash("success", "Los datos se actualizaron Correctamente. ");
        } catch (Exception $e) {
            $Transaccion->rollBack();
            Yii::app()->user->setFlash("danger", "Error: " . $e->getMessage());
        }

        $this->redirect($this->createUrl("afiliaciones/index"));

    }



    /**
    * @todo
    * Genera Documento Json para los Antecedentes Clinicos
    * @author erasto@realhost.com.mx
    */
    protected function _GeneraJsonAntecedentes(){


        $_GetData = Yii::app()->db->createCommand()
        ->select("branchcode,folio, antecedentes_clinicos")
        ->from("custbranch")
        //->where("folio = 17919 AND branchcode = 1 ")
        //->limit(1)
        ->queryAll();
        //FB::INFO($_GetData,'_____________data');


        $LIstAntecedentesClinicos = array(
            1 => 'CRISIS CONVULSIVA',
            2 => 'PROBLEMAS RENALES',
            3 => 'PROBLEMAS CONGENITOS',
            4 => 'PROBLEMAS CARDIACOS',
            5 => 'PROBLEMAS PSIQUIATRICOS',
            6 => 'HIPERTENCION ARTERIAL',
            7 => 'ASMA',
            8 => 'ALCOHOLISMO',
            9 => 'EMBOLIA CEREBRAL',
            10 => 'ALERGIA A ANALGESICO',
            11 => 'ALERGIA A ANTIBIOTICO',
            12 => 'ANGINA DE PECHO',
            13 => 'INFARTO PREVIO',
            14 => 'FUMADOR',
            15 => 'DIABETES',
            16 => 'CANCER',
            17 => 'SIDA',
            18 => 'ENF. INFECCIOSA',
            19 => 'ENF. PULMONARES',
            20 => 'ENF. HIGADO',
            21 => 'ALERGIA RESPIRATORIA',
            22 => 'CIRUGIAS PREVIAS',
            23 => 'PROBLEMA OCULAR',
            24 => 'PROBLEMA AUDITIVO',
            25 => 'SANGRADOS FRECUENTES',
            26 => 'MEDICAMENTOS HAB.',
            27 => 'OTROS',
            28 => 'NINGUNO',
        );
        // 1-4-7-
        // update custbranch set antecedentes_clinicos = '1-4-7-' where branchcode = 1 AND folio = 17919

/*
ID_ANTECEDENTESC    DESCRIPCION_ANTECEDENTESC
1   CRISIS CONVULSIVA
2   PROBLEMAS RENALES
3   PROBLEMAS CONGENITOS
4   PROBLEMAS CARDIACOS
5   PROBLEMAS PSIQUIATRICOS
6   HIPERTENSION ARTERIAL
7   ASMA
8   ALCOHOLISMO
9   EMBOLIA CEREBRAL
10  ALERGIA ANALGESICO
11  ALERGIA A ANTIBIOTICO
12  ANGINA DE PECHO
13  INFARTO PREVIO
14  FUMADOR
15  DIABETES
16  CANCER
17  SIDA
18  ENF. INFECCIOSA
19  ENF. PULMONARES
20  ENF. HIGADO
21  ALERGIA RESPIRATORIA
22  CIRUGIAS PREVIAS
23  PROBLEMA OCULAR
24  PROBLEMA AUDITIVO
25  SANGRADOS FRECUENTES
26  MEDICAMENTEOS HAB.
27  OTROS
28  NINGUNO
*/

        try {

            $Transaccion = Yii::app()->db->beginTransaction();

            $count = 0;
            foreach ($_GetData as $Data) {

                if(!empty($Data['folio']) && !empty($Data['antecedentes_clinicos']))
                {
                    $AntecedentesJson=$Data['antecedentes_clinicos'];
                    $AntecedentesID = explode("-", $Data['antecedentes_clinicos']);
                    $AntecedentesJson=json_decode($AntecedentesJson);
                    if(count($AntecedentesID)>0&&!$AntecedentesJson){
                        $AntecedentesJson = array();
                        foreach ($AntecedentesID as $ARID) {
                            if(is_numeric($ARID)&&$ARID&&isset($LIstAntecedentesClinicos[$ARID])) {
                                $AntecedentesJson[] = $LIstAntecedentesClinicos[$ARID];
                            }
                        }
                    }else{ 
			if(!is_array($AntecedentesJson))
				$AntecedentesJson=array($LIstAntecedentesClinicos[$AntecedentesJson]);
                        foreach ($AntecedentesJson as $key => $value)
                            if(!$value)
                                unset($AntecedentesJson[$key]);
                    }

                    $ActualizaAntecedentes = "UPDATE custbranch SET
                        antecedentes_clinicos = :antecedentes_clinicos
                    WHERE folio = :folio
                    AND branchcode = :branchcode
                    ";

                    $ActualizaAntecedentesParameters = array(
                        ":antecedentes_clinicos" => json_encode($AntecedentesJson,1),
                        ":folio" => $Data['folio'],
                        ":branchcode" => $Data['branchcode']
                    );
                    Yii::app()->db->createCommand($ActualizaAntecedentes)->execute($ActualizaAntecedentesParameters);
                }
                $count++;
            }

            $Transaccion->commit();
            Yii::app()->user->setFlash("success", "Los datos se actualizaron Correctamente. ");
        } catch (Exception $e) {
            $Transaccion->rollBack();
            Yii::app()->user->setFlash("danger", "Error: " . $e->getMessage());
        }

        $this->redirect($this->createUrl("afiliaciones/index"));

    }









}






